// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package gen

import (
	"context"
	"time"
)

const countOrdersByUserID = `-- name: CountOrdersByUserID :one
SELECT COUNT(*) FROM orders WHERE user_id = $1
`

func (q *Queries) CountOrdersByUserID(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countOrdersByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    status,
    payment_status,
    total_amount,
    shipping_address,
    shipping_city,
    shipping_country,
    shipping_zip,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, user_id, status, payment_status, total_amount, shipping_address, shipping_city, shipping_country, shipping_zip, created_at, updated_at
`

type CreateOrderParams struct {
	UserID          int32     `db:"user_id" json:"user_id"`
	Status          string    `db:"status" json:"status"`
	PaymentStatus   string    `db:"payment_status" json:"payment_status"`
	TotalAmount     float64   `db:"total_amount" json:"total_amount"`
	ShippingAddress string    `db:"shipping_address" json:"shipping_address"`
	ShippingCity    string    `db:"shipping_city" json:"shipping_city"`
	ShippingCountry string    `db:"shipping_country" json:"shipping_country"`
	ShippingZip     string    `db:"shipping_zip" json:"shipping_zip"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.Status,
		arg.PaymentStatus,
		arg.TotalAmount,
		arg.ShippingAddress,
		arg.ShippingCity,
		arg.ShippingCountry,
		arg.ShippingZip,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.PaymentStatus,
		&i.TotalAmount,
		&i.ShippingAddress,
		&i.ShippingCity,
		&i.ShippingCountry,
		&i.ShippingZip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    order_id,
    product_id,
    quantity,
    price,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, order_id, product_id, quantity, price, created_at, updated_at
`

type CreateOrderItemParams struct {
	OrderID   int32     `db:"order_id" json:"order_id"`
	ProductID int32     `db:"product_id" json:"product_id"`
	Quantity  int32     `db:"quantity" json:"quantity"`
	Price     float64   `db:"price" json:"price"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (*OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, status, payment_status, total_amount, shipping_address, shipping_city, shipping_country, shipping_zip, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.PaymentStatus,
		&i.TotalAmount,
		&i.ShippingAddress,
		&i.ShippingCity,
		&i.ShippingCountry,
		&i.ShippingZip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, product_id, quantity, price, created_at, updated_at FROM order_items WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID int32) ([]*OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, user_id, status, payment_status, total_amount, shipping_address, shipping_city, shipping_country, shipping_zip, created_at, updated_at FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByUserIDParams struct {
	UserID int32 `db:"user_id" json:"user_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetOrdersByUserID(ctx context.Context, arg GetOrdersByUserIDParams) ([]*Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.PaymentStatus,
			&i.TotalAmount,
			&i.ShippingAddress,
			&i.ShippingCity,
			&i.ShippingCountry,
			&i.ShippingZip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2,
    updated_at = $3
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID        int32     `db:"id" json:"id"`
	Status    string    `db:"status" json:"status"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE orders
SET payment_status = $2,
    updated_at = $3
WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID            int32     `db:"id" json:"id"`
	PaymentStatus string    `db:"payment_status" json:"payment_status"`
	UpdatedAt     time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus, arg.ID, arg.PaymentStatus, arg.UpdatedAt)
	return err
}
