// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package gen

import (
	"context"
	"time"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (
    user_id,
    product_id,
    quantity,
    price,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, product_id, quantity, price, created_at, updated_at
`

type CreateCartItemParams struct {
	UserID    int32     `db:"user_id" json:"user_id"`
	ProductID int32     `db:"product_id" json:"product_id"`
	Quantity  int32     `db:"quantity" json:"quantity"`
	Price     float64   `db:"price" json:"price"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (*CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items
WHERE user_id = $1 AND product_id = $2
`

type DeleteCartItemParams struct {
	UserID    int32 `db:"user_id" json:"user_id"`
	ProductID int32 `db:"product_id" json:"product_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.Exec(ctx, deleteCartItem, arg.UserID, arg.ProductID)
	return err
}

const deleteCartItemsByUser = `-- name: DeleteCartItemsByUser :exec
DELETE FROM cart_items
WHERE user_id = $1
`

func (q *Queries) DeleteCartItemsByUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteCartItemsByUser, userID)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, user_id, product_id, quantity, price, created_at, updated_at FROM cart_items
WHERE user_id = $1 AND product_id = $2
`

type GetCartItemParams struct {
	UserID    int32 `db:"user_id" json:"user_id"`
	ProductID int32 `db:"product_id" json:"product_id"`
}

func (q *Queries) GetCartItem(ctx context.Context, arg GetCartItemParams) (*CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItem, arg.UserID, arg.ProductID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT id, user_id, product_id, quantity, price, created_at, updated_at FROM cart_items
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCartItems(ctx context.Context, userID int32) ([]*CartItem, error) {
	rows, err := q.db.Query(ctx, getCartItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE cart_items
SET quantity = $3,
    updated_at = $4
WHERE user_id = $1 AND product_id = $2
`

type UpdateCartItemParams struct {
	UserID    int32     `db:"user_id" json:"user_id"`
	ProductID int32     `db:"product_id" json:"product_id"`
	Quantity  int32     `db:"quantity" json:"quantity"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.Exec(ctx, updateCartItem,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.UpdatedAt,
	)
	return err
}
