// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package gen

import (
	"context"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
WHERE
    (NULLIF(TRIM($1), '') IS NULL OR name ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%')
    AND ($2 = 0 OR category_id = $2)
    AND ($3 = 0 OR price >= $3)
    AND ($4 = 0 OR price <= $4)
`

type CountProductsParams struct {
	Btrim   string      `db:"btrim" json:"btrim"`
	Column2 interface{} `db:"column_2" json:"column_2"`
	Column3 interface{} `db:"column_3" json:"column_3"`
	Column4 interface{} `db:"column_4" json:"column_4"`
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts,
		arg.Btrim,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    description,
    price,
    category_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
) RETURNING id, name, description, price, category_id, created_at, updated_at
`

type CreateProductParams struct {
	Name        string  `db:"name" json:"name"`
	Description *string `db:"description" json:"description"`
	Price       float64 `db:"price" json:"price"`
	CategoryID  int32   `db:"category_id" json:"category_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (*Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCategories = `-- name: GetCategories :many
SELECT id, name, created_at, updated_at FROM categories
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetCategoriesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]*Category, error) {
	rows, err := q.db.Query(ctx, getCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByIds = `-- name: GetCategoriesByIds :many
SELECT id, name, created_at, updated_at FROM categories
WHERE id = ANY($1::int[])
`

func (q *Queries) GetCategoriesByIds(ctx context.Context, dollar_1 []int32) ([]*Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, created_at, updated_at FROM categories WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (*Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, category_id, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (*Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, description, price, category_id, created_at, updated_at FROM products
WHERE
    (NULLIF(TRIM($1), '') IS NULL OR name ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%')
    AND ($2 = 0 OR category_id = $2)
    AND ($3 = 0 OR price >= $3)
    AND ($4 = 0 OR price <= $4)
ORDER BY
    CASE $5::text
        WHEN 'price_asc' THEN price
        WHEN 'price_desc' THEN price * -1
        ELSE extract(epoch from created_at) * -1
    END,
    id DESC
LIMIT $6 OFFSET $7
`

type GetProductsParams struct {
	Btrim   string      `db:"btrim" json:"btrim"`
	Column2 interface{} `db:"column_2" json:"column_2"`
	Column3 interface{} `db:"column_3" json:"column_3"`
	Column4 interface{} `db:"column_4" json:"column_4"`
	Column5 string      `db:"column_5" json:"column_5"`
	Limit   int32       `db:"limit" json:"limit"`
	Offset  int32       `db:"offset" json:"offset"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, getProducts,
		arg.Btrim,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT id, name, description, price, category_id, created_at, updated_at FROM products
WHERE category_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetProductsByCategoryParams struct {
	CategoryID int32 `db:"category_id" json:"category_id"`
	Limit      int32 `db:"limit" json:"limit"`
	Offset     int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetProductsByCategory(ctx context.Context, arg GetProductsByCategoryParams) ([]*Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
